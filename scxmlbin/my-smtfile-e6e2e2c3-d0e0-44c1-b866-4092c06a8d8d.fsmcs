<?xml version="1.0"?>
<sm:StateMachine xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.stateforge.com/StateMachineDotNet-v1                                      http://www.stateforge.com/xsd/StateMachineDotNet-v1.xsd" xmlns:sm="http://www.stateforge.com/StateMachineDotNet-v1">
  <settings asynchronous="true" name="BusinessEngine" namespace="MyProduct.NameSpace" xmlns:sm="">
    <description>Model Generated by SCXML2StateBuilder (JG)</description>
    <object instance="boInstance" class="BusinessObject" namespace="MyProduct.NameSpace" />
    <context class="BusinessObjectContext" instance="context" />
    <using>System.IO</using>
    <using>System.Threading</using>
  </settings>
  <events xmlns:sm="">
    <eventSource name="BusinessObjectEventSourceFeed" feeder="BusinessObject" description="Default EVent Source">
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
      <event description=" imported" preAction="//PreACtion" postAction="//PostACtion">
        <parameter type="string" name="myParam" />
      </event>
    </eventSource>
  </events>
  <state name="StartState" description="DefaultState" xmlns:sm="">
    <transition event="envStart" nextState="start" />
    <state name="start" description="startState">
      <transition event="ExitContextDetected" nextState="Initializing" />
      <transition event="ManualExitStrategyActivated" nextState="Initializing" />
    </state>
    <state name="Initializing" description="InitializingState">
      <transition nextState="ObservingExitPattern" />
    </state>
    <state name="startObservingExitPattern" description="startObservingExitPatternState">
      <transition nextState="WaitForFractalBO" />
    </state>
    <state name="WaitForFractalBO" description="WaitForFractalBOState">
      <transition event="FractalBOFormed" nextState="WaitForAODivergence" />
    </state>
    <state name="WaitForAODivergence" description="WaitForAODivergenceState">
      <transition event="FractalBOBroken" nextState="endObservingExitPattern" />
    </state>
    <state name="endObservingExitPattern" description="endObservingExitPatternState" />
    <state name="startExitPhase" description="startExitPhaseState">
      <transition nextState="TrailGL" />
    </state>
    <state name="TrailGL" description="TrailGLState">
      <transition event="BDBSignalFound" nextState="OrderingTradeClose" />
      <transition event="GreenLineHit" nextState="endExitPhase" />
    </state>
    <state name="OrderingTradeClose" description="OrderingTradeCloseState">
      <transition event="ExitStopOrderMoved" nextState="WaitingExit" />
    </state>
    <state name="endExitPhase" description="endExitPhaseState" />
    <state name="WaitForBDBSignal" description="WaitForBDBSignalState">
      <transition event="NoBdbSignalFound" nextState="history" />
      <transition event="BDBSignalFound" nextState="OrderingTradeClose" />
    </state>
    <state name="history" description="historyState" />
    <state name="WaitingExit" description="WaitingExitState">
      <transition event="BDBExitSignalBecameInvalid" nextState="WaitForBDBSignal" />
      <transition event="BDBExitSignalBecameInvalid" nextState="TrailGL" />
      <transition event="TradeClosed" nextState="endExitPhase" />
    </state>
    <state name="startmyDummy" description="startmyDummyState">
      <transition nextState="Start" />
    </state>
    <state name="Start" description="StartState">
      <transition event="EventStart" nextState="Running" />
    </state>
    <state name="Running" description="RunningState">
      <transition event="Stop" nextState="endmyDummy" />
    </state>
    <state name="endmyDummy" description="endmyDummyState" />
    <state name="startmyDummy2" description="startmyDummy2State">
      <transition nextState="Start2" />
    </state>
    <state name="Start2" description="Start2State">
      <transition event="EventStart2" nextState="Running2" />
    </state>
    <state name="Running2" description="Running2State">
      <transition event="Stop2" nextState="endmyDummy2" />
    </state>
    <state name="endmyDummy2" description="endmyDummy2State" />
    <state name="PostTrading" description="PostTradingState">
      <transition nextState="end" />
    </state>
    <state name="end" description="endState" />
  </state>
</sm:StateMachine>